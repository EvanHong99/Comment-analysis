#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   decorator.py    
@Contact :   h939778128@gmail.com
@License :   No license

@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2020/7/10 16:47   EvanHong      1.0         None
'''
import logging
import time

def log_exception(fuct):
    def make_decorator(*args,**kwargs):
        try:

            return fuct(*args,**kwargs)
        except Exception as e:
            logger = logging.getLogger()
            logger.setLevel(level=logging.INFO)
            handler = logging.FileHandler("../resources/logs/log.txt")
            handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)

            console = logging.StreamHandler()
            console.setLevel(logging.INFO)

            logger.addHandler(handler)
            logger.addHandler(console)

            logger.info("Start print log")
            logger.debug("Do something")

            logger.warning("Something maybe fail.")
            print(e.__str__())
            logger.info("Finish")

def log_time(func):
    def make_decorator(*args,**kwargs):
        start=time.time()
        func(*args,**kwargs)
        end=time.time()


from functools import wraps


def logit(logfile='out.log'):
    def logging_decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            log_string = func.__name__ + " was called"
            print(log_string)
            # 打开logfile，并写入内容
            with open(logfile, 'a') as opened_file:
                # 现在将日志打到指定的logfile
                opened_file.write(log_string + '\n')
            return func(*args, **kwargs)

        return wrapped_function

    return logging_decorator#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   decorator.py    
@Contact :   h939778128@gmail.com
@License :   No license

@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2020/7/10 16:47   EvanHong      1.0         None
'''
import logging
import time

def log_exception(fuct):
    def make_decorator(*args,**kwargs):
        try:

            return fuct(*args,**kwargs)
        except Exception as e:
            logger = logging.getLogger()
            logger.setLevel(level=logging.INFO)
            handler = logging.FileHandler("../resources/logs/log.txt")
            handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)

            console = logging.StreamHandler()
            console.setLevel(logging.INFO)

            logger.addHandler(handler)
            logger.addHandler(console)

            logger.info("Start print log")
            logger.debug("Do something")

            logger.warning("Something maybe fail.")
            print(e.__str__())
            logger.info("Finish")

def log_time(func):
    def make_decorator(*args,**kwargs):
        start=time.time()
        func(*args,**kwargs)
        end=time.time()


from functools import wraps


def logit(logfile='out.log'):
    def logging_decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            log_string = func.__name__ + " was called"
            print(log_string)
            # 打开logfile，并写入内容
            with open(logfile, 'a') as opened_file:
                # 现在将日志打到指定的logfile
                opened_file.write(log_string + '\n')
            return func(*args, **kwargs)

        return wrapped_function

    return logging_decorator
